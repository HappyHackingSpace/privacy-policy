{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Privacy Policy Analyzer","text":"<p>Welcome to the Privacy Policy Analyzer - an AI-powered tool designed to help you understand and analyze privacy policies with ease.</p>"},{"location":"#features","title":"\ud83d\ude80 Features","text":"<ul> <li>AI-Powered Analysis: Uses advanced language models to extract key information from privacy policies</li> <li>Comprehensive Scoring: Evaluates privacy policies across multiple dimensions</li> <li>Easy Integration: Simple Python API for seamless integration into your workflow</li> <li>Web Scraping: Automatically extracts privacy policy content from websites</li> <li>Caching: Intelligent caching system for improved performance</li> </ul>"},{"location":"#what-it-does","title":"\ud83c\udfaf What It Does","text":"<p>The Privacy Policy Analyzer helps you:</p> <ul> <li>Extract Key Information: Automatically identify data collection practices, sharing policies,   and user rights</li> <li>Score Privacy Policies: Get quantitative scores on various privacy aspects</li> <li>Compare Policies: Analyze multiple privacy policies side by side</li> <li>Generate Reports: Create detailed analysis reports for stakeholders</li> </ul>"},{"location":"#quick-start","title":"\ud83c\udfc3\u200d\u2642\ufe0f Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code># Clone the repository\ngit clone https://github.com/HappyHackingSpace/privacy-policy.git\ncd privacy-policy\n\n# Using uv (recommended)\nuv sync\n\n# Or using pip\npip install -e .\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>from privacy_policy import PrivacyPolicyAnalyzer\n\n# Initialize the analyzer\nanalyzer = PrivacyPolicyAnalyzer()\n\n# Analyze a privacy policy URL\nresult = analyzer.analyze_url(\"https://example.com/privacy\")\n\n# Print the analysis results\nprint(f\"Privacy Score: {result.score}\")\nprint(f\"Key Findings: {result.findings}\")\n</code></pre>"},{"location":"#analysis-dimensions","title":"\ud83d\udcca Analysis Dimensions","text":"<p>Our analyzer evaluates privacy policies across several key dimensions:</p> <ul> <li>Data Collection: What data is collected and how</li> <li>Data Sharing: Who data is shared with and under what conditions</li> <li>User Rights: What rights users have over their data</li> <li>Transparency: How clear and understandable the policy is</li> <li>Compliance: Adherence to privacy regulations (GDPR, CCPA, etc.)</li> </ul>"},{"location":"#advanced-features","title":"\ud83d\udd27 Advanced Features","text":"<ul> <li>Custom Prompts: Tailor analysis to your specific needs</li> <li>Batch Processing: Analyze multiple policies at once</li> <li>Export Options: Generate reports in various formats</li> <li>API Integration: RESTful API for web applications</li> </ul>"},{"location":"#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>User Guide - Complete guide to using the analyzer</li> <li>API Reference - Detailed API documentation</li> <li>Contributing - How to contribute to the project</li> </ul>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions! Please see our Contributing Guide for details on how to get started.</p>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"#support","title":"\ud83c\udd98 Support","text":"<ul> <li>Issues: Report bugs or request features on GitHub Issues</li> <li>Discussions: Join our community discussions on GitHub Discussions</li> <li>Discord: Join our Happy Hacking Space Discord</li> </ul> <p>Built with \u2764\ufe0f for privacy-conscious developers and organizations</p>"},{"location":"api/","title":"API Reference","text":"<p>Complete API documentation for the Privacy Policy Analyzer.</p>"},{"location":"api/#table-of-contents","title":"\ud83d\udccb Table of Contents","text":"<ul> <li>PrivacyPolicyAnalyzer</li> <li>AnalysisResult</li> <li>WebExtractor</li> <li>ScoringEngine</li> <li>Exceptions</li> <li>Utilities</li> </ul>"},{"location":"api/#privacypolicyanalyzer","title":"PrivacyPolicyAnalyzer","text":"<p>The main class for analyzing privacy policies.</p>"},{"location":"api/#constructor","title":"Constructor","text":"<pre><code>PrivacyPolicyAnalyzer(\n    api_key: Optional[str] = None,\n    model: str = \"gpt-4\",\n    temperature: float = 0.1,\n    cache_dir: Optional[str] = None,\n    cache_ttl: int = 3600,\n    timeout: int = 30,\n    max_retries: int = 3,\n    include_recommendations: bool = True,\n    detailed_analysis: bool = True,\n    language: str = \"en\",\n    debug: bool = False\n)\n</code></pre>"},{"location":"api/#parameters","title":"Parameters","text":"<ul> <li>api_key (<code>Optional[str]</code>): OpenAI API key. If not provided, will look for <code>OPENAI_API_KEY</code> environment variable.</li> <li>model (<code>str</code>): OpenAI model to use for analysis. Default: <code>\"gpt-4\"</code>.</li> <li>temperature (<code>float</code>): Temperature for text generation. Default: <code>0.1</code>.</li> <li>cache_dir (<code>Optional[str]</code>): Directory for caching results. Default: <code>None</code> (no caching).</li> <li>cache_ttl (<code>int</code>): Cache time-to-live in seconds. Default: <code>3600</code> (1 hour).</li> <li>timeout (<code>int</code>): Request timeout in seconds. Default: <code>30</code>.</li> <li>max_retries (<code>int</code>): Maximum number of retries for failed requests. Default: <code>3</code>.</li> <li>include_recommendations (<code>bool</code>): Whether to include recommendations in results. Default: <code>True</code>.</li> <li>detailed_analysis (<code>bool</code>): Whether to perform detailed analysis. Default: <code>True</code>.</li> <li>language (<code>str</code>): Language for analysis. Default: <code>\"en\"</code>.</li> <li>debug (<code>bool</code>): Enable debug logging. Default: <code>False</code>.</li> </ul>"},{"location":"api/#methods","title":"Methods","text":""},{"location":"api/#analyze_url","title":"analyze_url","text":"<pre><code>analyze_url(\n    url: str,\n    extract_method: str = \"auto\",\n    timeout: Optional[int] = None,\n    follow_redirects: bool = True,\n    custom_prompts: Optional[Dict[str, str]] = None\n) -&gt; AnalysisResult\n</code></pre> <p>Analyze a privacy policy from a URL.</p> <p>Parameters: - url (<code>str</code>): URL of the privacy policy page. - extract_method (<code>str</code>): Method for extracting content. Options: <code>\"auto\"</code>, <code>\"trafilatura\"</code>,   <code>\"beautifulsoup\"</code>. Default: <code>\"auto\"</code>. - timeout (<code>Optional[int]</code>): Override default timeout for this request. - follow_redirects (<code>bool</code>): Whether to follow redirects. Default: <code>True</code>. - custom_prompts (<code>Optional[Dict[str, str]]</code>): Custom prompts for analysis.</p> <p>Returns: <code>AnalysisResult</code> object with analysis results.</p> <p>Raises: - <code>ExtractionError</code>: If content extraction fails. - <code>AnalysisError</code>: If analysis fails. - <code>NetworkError</code>: If network request fails.</p>"},{"location":"api/#analyze_text","title":"analyze_text","text":"<pre><code>analyze_text(\n    text: str,\n    custom_prompts: Optional[Dict[str, str]] = None,\n    metadata: Optional[Dict[str, Any]] = None\n) -&gt; AnalysisResult\n</code></pre> <p>Analyze privacy policy text directly.</p> <p>Parameters: - text (<code>str</code>): Privacy policy text to analyze. - custom_prompts (<code>Optional[Dict[str, str]]</code>): Custom prompts for analysis. - metadata (<code>Optional[Dict[str, Any]]</code>): Additional metadata for the analysis.</p> <p>Returns: <code>AnalysisResult</code> object with analysis results.</p> <p>Raises: - <code>AnalysisError</code>: If analysis fails.</p>"},{"location":"api/#analyze_file","title":"analyze_file","text":"<pre><code>analyze_file(\n    file_path: str,\n    encoding: str = \"utf-8\",\n    custom_prompts: Optional[Dict[str, str]] = None\n) -&gt; AnalysisResult\n</code></pre> <p>Analyze a privacy policy from a local file.</p> <p>Parameters: - file_path (<code>str</code>): Path to the privacy policy file. - encoding (<code>str</code>): File encoding. Default: <code>\"utf-8\"</code>. - custom_prompts (<code>Optional[Dict[str, str]]</code>): Custom prompts for analysis.</p> <p>Returns: <code>AnalysisResult</code> object with analysis results.</p> <p>Raises: - <code>FileNotFoundError</code>: If file doesn't exist. - <code>AnalysisError</code>: If analysis fails.</p>"},{"location":"api/#analyze_batch","title":"analyze_batch","text":"<pre><code>analyze_batch(\n    inputs: List[Union[str, Dict[str, Any]]],\n    max_concurrent: int = 5,\n    progress_callback: Optional[Callable[[int, int], None]] = None\n) -&gt; List[AnalysisResult]\n</code></pre> <p>Analyze multiple privacy policies in batch.</p> <p>Parameters: - inputs (<code>List[Union[str, Dict[str, Any]]]</code>): List of URLs, text, or file paths to analyze. - max_concurrent (<code>int</code>): Maximum concurrent analyses. Default: <code>5</code>. - progress_callback (<code>Optional[Callable[[int, int], None]]</code>): Callback for progress updates.</p> <p>Returns: List of <code>AnalysisResult</code> objects.</p>"},{"location":"api/#compare_results","title":"compare_results","text":"<pre><code>compare_results(results: List[AnalysisResult]) -&gt; ComparisonResult\n</code></pre> <p>Compare multiple analysis results.</p> <p>Parameters: - results (<code>List[AnalysisResult]</code>): List of analysis results to compare.</p> <p>Returns: <code>ComparisonResult</code> object with comparison data.</p>"},{"location":"api/#clear_cache","title":"clear_cache","text":"<pre><code>clear_cache() -&gt; None\n</code></pre> <p>Clear the analysis cache.</p>"},{"location":"api/#analysisresult","title":"AnalysisResult","text":"<p>Represents the result of a privacy policy analysis.</p>"},{"location":"api/#properties","title":"Properties","text":"<ul> <li>overall_score (<code>float</code>): Overall privacy score (0-100).</li> <li>dimension_scores (<code>Dict[str, float]</code>): Scores for each dimension.</li> <li>confidence (<code>float</code>): Analysis confidence (0-100).</li> <li>findings (<code>List[str]</code>): Key findings from the analysis.</li> <li>recommendations (<code>List[str]</code>): Recommendations for improvement.</li> <li>raw_content (<code>str</code>): Raw extracted content.</li> <li>analysis_time (<code>float</code>): Time taken for analysis in seconds.</li> <li>metadata (<code>Dict[str, Any]</code>): Additional metadata.</li> <li>custom_scores (<code>Dict[str, float]</code>): Custom analysis scores.</li> </ul>"},{"location":"api/#methods_1","title":"Methods","text":""},{"location":"api/#export_json","title":"export_json","text":"<pre><code>export_json(file_path: str) -&gt; None\n</code></pre> <p>Export results to JSON file.</p>"},{"location":"api/#export_csv","title":"export_csv","text":"<pre><code>export_csv(file_path: str) -&gt; None\n</code></pre> <p>Export results to CSV file.</p>"},{"location":"api/#export_html","title":"export_html","text":"<pre><code>export_html(file_path: str, template: Optional[str] = None) -&gt; None\n</code></pre> <p>Export results to HTML report.</p>"},{"location":"api/#webextractor","title":"WebExtractor","text":"<p>Utility class for extracting content from web pages.</p>"},{"location":"api/#constructor_1","title":"Constructor","text":"<pre><code>WebExtractor(\n    timeout: int = 30,\n    max_retries: int = 3,\n    user_agent: str = \"PrivacyPolicyAnalyzer/1.0\"\n)\n</code></pre>"},{"location":"api/#methods_2","title":"Methods","text":""},{"location":"api/#extract","title":"extract","text":"<pre><code>extract(\n    url: str,\n    method: str = \"auto\",\n    follow_redirects: bool = True\n) -&gt; str\n</code></pre> <p>Extract content from a URL.</p> <p>Parameters: - url (<code>str</code>): URL to extract content from. - method (<code>str</code>): Extraction method. Options: <code>\"auto\"</code>, <code>\"trafilatura\"</code>, <code>\"beautifulsoup\"</code>. - follow_redirects (<code>bool</code>): Whether to follow redirects.</p> <p>Returns: Extracted text content.</p> <p>Raises: - <code>ExtractionError</code>: If extraction fails.</p>"},{"location":"api/#scoringengine","title":"ScoringEngine","text":"<p>Engine for scoring privacy policies.</p>"},{"location":"api/#constructor_2","title":"Constructor","text":"<pre><code>ScoringEngine(\n    model: str = \"gpt-4\",\n    temperature: float = 0.1,\n    custom_prompts: Optional[Dict[str, str]] = None\n)\n</code></pre>"},{"location":"api/#methods_3","title":"Methods","text":""},{"location":"api/#score_policy","title":"score_policy","text":"<pre><code>score_policy(\n    content: str,\n    dimensions: Optional[List[str]] = None\n) -&gt; Dict[str, float]\n</code></pre> <p>Score a privacy policy across different dimensions.</p> <p>Parameters: - content (<code>str</code>): Privacy policy content. - dimensions (<code>Optional[List[str]]</code>): List of dimensions to score.</p> <p>Returns: Dictionary mapping dimensions to scores.</p>"},{"location":"api/#exceptions","title":"Exceptions","text":""},{"location":"api/#privacypolicyerror","title":"PrivacyPolicyError","text":"<p>Base exception for all privacy policy analyzer errors.</p> <pre><code>class PrivacyPolicyError(Exception):\n    pass\n</code></pre>"},{"location":"api/#extractionerror","title":"ExtractionError","text":"<p>Raised when content extraction fails.</p> <pre><code>class ExtractionError(PrivacyPolicyError):\n    def __init__(self, message: str, url: Optional[str] = None):\n        self.url = url\n        super().__init__(message)\n</code></pre>"},{"location":"api/#analysiserror","title":"AnalysisError","text":"<p>Raised when analysis fails.</p> <pre><code>class AnalysisError(PrivacyPolicyError):\n    def __init__(self, message: str, content: Optional[str] = None):\n        self.content = content\n        super().__init__(message)\n</code></pre>"},{"location":"api/#networkerror","title":"NetworkError","text":"<p>Raised when network requests fail.</p> <pre><code>class NetworkError(PrivacyPolicyError):\n    def __init__(self, message: str, url: Optional[str] = None, status_code: Optional[int] = None):\n        self.url = url\n        self.status_code = status_code\n        super().__init__(message)\n</code></pre>"},{"location":"api/#utilities","title":"Utilities","text":""},{"location":"api/#configuration","title":"Configuration","text":"<pre><code>from privacy_policy.config import Config\n\n# Load configuration from environment\nconfig = Config.from_env()\n\n# Load configuration from file\nconfig = Config.from_file(\"config.yaml\")\n\n# Create configuration programmatically\nconfig = Config(\n    api_key=\"your-key\",\n    model=\"gpt-4\",\n    timeout=30\n)\n</code></pre>"},{"location":"api/#logging","title":"Logging","text":"<pre><code>from privacy_policy.logging import setup_logging\n\n# Setup logging\nsetup_logging(level=\"INFO\", log_file=\"analyzer.log\")\n\n# Use logger\nimport logging\nlogger = logging.getLogger(\"privacy_policy\")\nlogger.info(\"Analysis started\")\n</code></pre>"},{"location":"api/#caching","title":"Caching","text":"<pre><code>from privacy_policy.cache import Cache\n\n# Create cache\ncache = Cache(cache_dir=\"./cache\", ttl=3600)\n\n# Store result\ncache.store(\"key\", result)\n\n# Retrieve result\nresult = cache.retrieve(\"key\")\n\n# Clear cache\ncache.clear()\n</code></pre>"},{"location":"api/#examples","title":"Examples","text":""},{"location":"api/#basic-usage","title":"Basic Usage","text":"<pre><code>from privacy_policy import PrivacyPolicyAnalyzer\n\n# Initialize analyzer\nanalyzer = PrivacyPolicyAnalyzer(api_key=\"your-key\")\n\n# Analyze URL\nresult = analyzer.analyze_url(\"https://example.com/privacy\")\n\n# Access results\nprint(f\"Score: {result.overall_score}\")\nprint(f\"Findings: {result.findings}\")\n</code></pre>"},{"location":"api/#custom-analysis","title":"Custom Analysis","text":"<pre><code># Custom prompts\ncustom_prompts = {\n    \"data_collection\": \"Focus on data collection practices\",\n    \"user_rights\": \"Analyze user rights and controls\"\n}\n\n# Analyze with custom prompts\nresult = analyzer.analyze_text(\n    policy_text,\n    custom_prompts=custom_prompts\n)\n\n# Access custom scores\nprint(f\"Data Collection Score: {result.custom_scores['data_collection']}\")\n</code></pre>"},{"location":"api/#batch-processing","title":"Batch Processing","text":"<pre><code># Analyze multiple policies\nurls = [\n    \"https://company1.com/privacy\",\n    \"https://company2.com/privacy\"\n]\n\nresults = analyzer.analyze_batch(urls)\n\n# Compare results\ncomparison = analyzer.compare_results(results)\nprint(comparison.summary)\n</code></pre>"},{"location":"api/#error-handling","title":"Error Handling","text":"<pre><code>from privacy_policy.exceptions import ExtractionError, AnalysisError\n\ntry:\n    result = analyzer.analyze_url(\"https://example.com/privacy\")\nexcept ExtractionError as e:\n    print(f\"Failed to extract content: {e}\")\n    print(f\"URL: {e.url}\")\nexcept AnalysisError as e:\n    print(f\"Analysis failed: {e}\")\n    print(f\"Content length: {len(e.content) if e.content else 0}\")\n</code></pre> <p>For more examples and advanced usage, see the User Guide.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to the Privacy Policy Analyzer project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Complete project restructure with modern Python packaging</li> <li>Enhanced privacy policy analysis functionality</li> <li>Web content extraction using trafilatura and BeautifulSoup</li> <li>AI-powered analysis using OpenAI GPT models</li> <li>Comprehensive scoring system across multiple dimensions</li> <li>Caching system for improved performance</li> <li>Batch processing capabilities</li> <li>Export functionality (JSON, CSV, HTML)</li> <li>Command-line interface using cliff</li> <li>Comprehensive documentation with MkDocs and Material theme</li> <li>Pre-commit hooks for code quality and documentation</li> <li>Testing framework with pytest</li> <li>Type checking with mypy</li> <li>Code formatting with Black and isort</li> <li>Linting with ruff</li> <li>GitHub Actions CI/CD pipeline</li> <li>Automated release workflow</li> <li>Integration with Happy Hacking Space organization</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Nothing yet</li> </ul>"},{"location":"changelog/#deprecated","title":"Deprecated","text":"<ul> <li>Nothing yet</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>Nothing yet</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Nothing yet</li> </ul>"},{"location":"changelog/#security","title":"Security","text":"<ul> <li>Nothing yet</li> </ul>"},{"location":"changelog/#010-2024-01-xx","title":"[0.1.0] - 2024-01-XX","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Initial release of Privacy Policy Analyzer</li> <li>Core analysis engine with OpenAI integration</li> <li>Web scraping capabilities</li> <li>Basic scoring system</li> <li>Documentation website</li> <li>Development tools and CI/CD setup</li> </ul>"},{"location":"changelog/#legend","title":"Legend","text":"<ul> <li>Added for new features</li> <li>Changed for changes in existing functionality</li> <li>Deprecated for soon-to-be removed features</li> <li>Removed for now removed features</li> <li>Fixed for any bug fixes</li> <li>Security for vulnerability fixes</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Thank you for your interest in contributing to the Privacy Policy Analyzer! This document provides guidelines and information for contributors.</p>"},{"location":"contributing/#table-of-contents","title":"\ud83d\udccb Table of Contents","text":"<ul> <li>Getting Started</li> <li>Development Setup</li> <li>Contributing Guidelines</li> <li>Code Style</li> <li>Testing</li> <li>Documentation</li> <li>Submitting Changes</li> </ul>"},{"location":"contributing/#getting-started","title":"\ud83d\ude80 Getting Started","text":""},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.13 or higher</li> <li>Git</li> <li>uv (recommended) or pip</li> <li>OpenAI API key (for testing)</li> </ul>"},{"location":"contributing/#fork-and-clone","title":"Fork and Clone","text":"<ol> <li>Fork the repository on GitHub</li> <li>Clone your fork locally:</li> </ol> <pre><code>git clone https://github.com/your-username/privacy-policy.git\ncd privacy-policy\n</code></pre> <ol> <li>Add the upstream repository:</li> </ol> <pre><code>git remote add upstream https://github.com/original-username/privacy-policy.git\n</code></pre>"},{"location":"contributing/#development-setup","title":"\ud83d\udd27 Development Setup","text":""},{"location":"contributing/#1-install-dependencies","title":"1. Install Dependencies","text":"<pre><code># Using uv (recommended)\nuv sync --dev\n\n# Using pip\npip install -e \".[dev]\"\n</code></pre>"},{"location":"contributing/#2-install-pre-commit-hooks","title":"2. Install Pre-commit Hooks","text":"<pre><code>uv run pre-commit install\n</code></pre>"},{"location":"contributing/#3-set-up-environment","title":"3. Set Up Environment","text":"<pre><code># Copy environment template\ncp .env.example .env\n\n# Edit .env with your configuration\n# OPENAI_API_KEY=your-api-key-here\n# CACHE_DIR=./cache\n# LOG_LEVEL=DEBUG\n</code></pre>"},{"location":"contributing/#4-verify-setup","title":"4. Verify Setup","text":"<pre><code># Run tests\nuv run pytest\n\n# Run linting\nuv run ruff check\n\n# Run type checking\nuv run mypy src/\n</code></pre>"},{"location":"contributing/#contributing-guidelines","title":"\ud83d\udcdd Contributing Guidelines","text":""},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":"<p>We welcome various types of contributions:</p> <ul> <li>Bug Reports: Report bugs and issues</li> <li>Feature Requests: Suggest new features</li> <li>Code Contributions: Fix bugs, add features</li> <li>Documentation: Improve documentation</li> <li>Testing: Add or improve tests</li> <li>Examples: Add usage examples</li> </ul>"},{"location":"contributing/#before-contributing","title":"Before Contributing","text":"<ol> <li>Check Issues: Look for existing issues or discussions</li> <li>Create Issue: For significant changes, create an issue first</li> <li>Discuss: Engage in discussions before starting work</li> <li>Fork: Fork the repository and create a feature branch</li> </ol>"},{"location":"contributing/#workflow","title":"Workflow","text":"<ol> <li>Create Branch: Create a feature branch from <code>main</code></li> </ol> <pre><code>git checkout -b feature/your-feature-name\n</code></pre> <ol> <li>Make Changes: Implement your changes</li> <li>Test: Ensure all tests pass</li> <li>Document: Update documentation if needed</li> <li>Commit: Write clear commit messages</li> <li>Push: Push your branch to your fork</li> <li>Pull Request: Create a pull request</li> </ol>"},{"location":"contributing/#code-style","title":"\ud83c\udfa8 Code Style","text":""},{"location":"contributing/#python-style","title":"Python Style","text":"<p>We follow PEP 8 with some modifications:</p> <ul> <li>Line Length: 88 characters (Black default)</li> <li>Import Sorting: isort with Black profile</li> <li>Type Hints: Required for all functions and methods</li> <li>Docstrings: Google style docstrings</li> </ul>"},{"location":"contributing/#formatting","title":"Formatting","text":"<p>We use automated formatting tools:</p> <pre><code># Format code\nuv run black src/ tests/\nuv run isort src/ tests/\n\n# Or run both\nuv run ruff format src/ tests/\n</code></pre>"},{"location":"contributing/#linting","title":"Linting","text":"<pre><code># Check code quality\nuv run ruff check src/ tests/\n\n# Fix auto-fixable issues\nuv run ruff check --fix src/ tests/\n</code></pre>"},{"location":"contributing/#type-checking","title":"Type Checking","text":"<pre><code># Run type checker\nuv run mypy src/\n</code></pre>"},{"location":"contributing/#testing","title":"\ud83e\uddea Testing","text":""},{"location":"contributing/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\nuv run pytest\n\n# Run with coverage\nuv run pytest --cov=src --cov-report=html\n\n# Run specific test file\nuv run pytest tests/test_analyzer.py\n\n# Run with verbose output\nuv run pytest -v\n</code></pre>"},{"location":"contributing/#writing-tests","title":"Writing Tests","text":"<ul> <li>Test Files: Place tests in <code>tests/</code> directory</li> <li>Naming: Test files should start with <code>test_</code></li> <li>Functions: Test functions should start with <code>test_</code></li> <li>Fixtures: Use pytest fixtures for common setup</li> <li>Coverage: Aim for high test coverage</li> </ul>"},{"location":"contributing/#test-structure","title":"Test Structure","text":"<pre><code>import pytest\nfrom privacy_policy import PrivacyPolicyAnalyzer\n\nclass TestPrivacyPolicyAnalyzer:\n    def test_initialization(self):\n        \"\"\"Test analyzer initialization.\"\"\"\n        analyzer = PrivacyPolicyAnalyzer()\n        assert analyzer is not None\n\n    def test_analyze_text(self):\n        \"\"\"Test text analysis.\"\"\"\n        analyzer = PrivacyPolicyAnalyzer()\n        result = analyzer.analyze_text(\"Test privacy policy text\")\n        assert result.overall_score &gt;= 0\n        assert result.overall_score &lt;= 100\n</code></pre>"},{"location":"contributing/#documentation","title":"\ud83d\udcda Documentation","text":""},{"location":"contributing/#code-documentation","title":"Code Documentation","text":"<ul> <li>Docstrings: All public functions and classes need docstrings</li> <li>Type Hints: Use type hints for all parameters and return values</li> <li>Comments: Add comments for complex logic</li> </ul>"},{"location":"contributing/#example-docstring","title":"Example Docstring","text":"<pre><code>def analyze_url(\n    self,\n    url: str,\n    extract_method: str = \"auto\",\n    timeout: Optional[int] = None,\n    follow_redirects: bool = True,\n    custom_prompts: Optional[Dict[str, str]] = None\n) -&gt; AnalysisResult:\n    \"\"\"Analyze a privacy policy from a URL.\n\n    Args:\n        url: URL of the privacy policy page\n        extract_method: Method for extracting content\n        timeout: Override default timeout for this request\n        follow_redirects: Whether to follow redirects\n        custom_prompts: Custom prompts for analysis\n\n    Returns:\n        AnalysisResult object with analysis results\n\n    Raises:\n        ExtractionError: If content extraction fails\n        AnalysisError: If analysis fails\n        NetworkError: If network request fails\n    \"\"\"\n</code></pre>"},{"location":"contributing/#documentation-updates","title":"Documentation Updates","text":"<p>When adding features or changing APIs:</p> <ol> <li>Update Docstrings: Update relevant docstrings</li> <li>Update README: Update README if needed</li> <li>Update User Guide: Update user guide for new features</li> <li>Update API Docs: Update API documentation</li> <li>Add Examples: Add usage examples</li> </ol>"},{"location":"contributing/#submitting-changes","title":"\ud83d\udd04 Submitting Changes","text":""},{"location":"contributing/#commit-messages","title":"Commit Messages","text":"<p>Use clear, descriptive commit messages:</p> <pre><code>feat: add batch analysis functionality\n\n- Add analyze_batch method to PrivacyPolicyAnalyzer\n- Add progress callback support\n- Add concurrent processing with configurable limits\n- Update documentation and examples\n\nCloses #123\n</code></pre>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Title: Use clear, descriptive title</li> <li>Description: Provide detailed description</li> <li>Reference Issues: Link to related issues</li> <li>Screenshots: Include screenshots for UI changes</li> <li>Testing: Mention testing done</li> <li>Breaking Changes: Note any breaking changes</li> </ol>"},{"location":"contributing/#pull-request-template","title":"Pull Request Template","text":"<pre><code>## Description\nBrief description of changes\n\n## Type of Change\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Breaking change\n- [ ] Documentation update\n\n## Testing\n- [ ] Tests pass locally\n- [ ] New tests added\n- [ ] Manual testing completed\n\n## Checklist\n- [ ] Code follows style guidelines\n- [ ] Self-review completed\n- [ ] Documentation updated\n- [ ] No breaking changes (or documented)\n\n## Related Issues\nCloses #123\n</code></pre>"},{"location":"contributing/#release-process","title":"\ud83c\udff7\ufe0f Release Process","text":""},{"location":"contributing/#version-bumping","title":"Version Bumping","text":"<p>We use semantic versioning (MAJOR.MINOR.PATCH):</p> <ul> <li>MAJOR: Breaking changes</li> <li>MINOR: New features (backward compatible)</li> <li>PATCH: Bug fixes (backward compatible)</li> </ul>"},{"location":"contributing/#changelog","title":"Changelog","text":"<p>Update <code>CHANGELOG.md</code> with:</p> <ul> <li>Added: New features</li> <li>Changed: Changes to existing functionality</li> <li>Deprecated: Soon-to-be removed features</li> <li>Removed: Removed features</li> <li>Fixed: Bug fixes</li> <li>Security: Security improvements</li> </ul>"},{"location":"contributing/#community-guidelines","title":"\ud83e\udd1d Community Guidelines","text":""},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<ul> <li>Be respectful and inclusive</li> <li>Welcome newcomers</li> <li>Focus on constructive feedback</li> <li>Help others learn and grow</li> </ul>"},{"location":"contributing/#getting-help","title":"Getting Help","text":"<ul> <li>GitHub Discussions: For questions and discussions</li> <li>GitHub Issues: For bug reports and feature requests</li> <li>Email: Contact maintainers directly</li> <li>Discord: Join our community Discord</li> </ul>"},{"location":"contributing/#recognition","title":"Recognition","text":"<p>Contributors will be recognized in:</p> <ul> <li>CONTRIBUTORS.md: List of all contributors</li> <li>Release Notes: Mentioned in release notes</li> <li>GitHub: Listed as contributors</li> </ul>"},{"location":"contributing/#contact","title":"\ud83d\udcde Contact","text":"<ul> <li>Organization: Happy Hacking Space</li> <li>Repository: @HappyHackingSpace/privacy-policy</li> <li>Discord: Join our server</li> </ul> <p>Thank you for contributing to the Privacy Policy Analyzer! \ud83c\udf89</p>"},{"location":"user-guide/","title":"User Guide","text":"<p>This comprehensive guide will help you get started with the Privacy Policy Analyzer and make the most of its features.</p>"},{"location":"user-guide/#table-of-contents","title":"\ud83d\udccb Table of Contents","text":"<ul> <li>Installation</li> <li>Basic Usage</li> <li>Configuration</li> <li>Analysis Methods</li> <li>Understanding Results</li> <li>Advanced Features</li> <li>Troubleshooting</li> </ul>"},{"location":"user-guide/#installation","title":"\ud83d\ude80 Installation","text":""},{"location":"user-guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.13 or higher</li> <li>Internet connection for downloading models and accessing websites</li> </ul>"},{"location":"user-guide/#install-the-package","title":"Install the Package","text":"<pre><code># Using uv (recommended)\nuv add privacy-policy\n\n# Using pip\npip install privacy-policy\n\n# From source\ngit clone https://github.com/your-username/privacy-policy.git\ncd privacy-policy\nuv sync\n</code></pre>"},{"location":"user-guide/#verify-installation","title":"Verify Installation","text":"<pre><code>import privacy_policy\nprint(f\"Privacy Policy Analyzer version: {privacy_policy.__version__}\")\n</code></pre>"},{"location":"user-guide/#basic-usage","title":"\ud83d\udd27 Basic Usage","text":""},{"location":"user-guide/#1-initialize-the-analyzer","title":"1. Initialize the Analyzer","text":"<pre><code>from privacy_policy import PrivacyPolicyAnalyzer\n\n# Basic initialization\nanalyzer = PrivacyPolicyAnalyzer()\n\n# With custom configuration\nanalyzer = PrivacyPolicyAnalyzer(\n    api_key=\"your-openai-api-key\",\n    cache_dir=\"./cache\",\n    timeout=30\n)\n</code></pre>"},{"location":"user-guide/#2-analyze-a-privacy-policy","title":"2. Analyze a Privacy Policy","text":""},{"location":"user-guide/#from-url","title":"From URL","text":"<pre><code># Analyze a privacy policy from a website\nresult = analyzer.analyze_url(\"https://example.com/privacy-policy\")\n\nprint(f\"Overall Score: {result.overall_score}\")\nprint(f\"Confidence: {result.confidence}\")\nprint(f\"Key Findings: {result.findings}\")\n</code></pre>"},{"location":"user-guide/#from-text","title":"From Text","text":"<pre><code># Analyze privacy policy text directly\npolicy_text = \"\"\"\nYour privacy is important to us. We collect information...\n\"\"\"\n\nresult = analyzer.analyze_text(policy_text)\n</code></pre>"},{"location":"user-guide/#from-file","title":"From File","text":"<pre><code># Analyze a privacy policy from a local file\nresult = analyzer.analyze_file(\"privacy_policy.txt\")\n</code></pre>"},{"location":"user-guide/#3-understanding-the-results","title":"3. Understanding the Results","text":"<pre><code># Access detailed results\nprint(\"=== PRIVACY ANALYSIS RESULTS ===\")\nprint(f\"Overall Score: {result.overall_score}/100\")\nprint(f\"Confidence: {result.confidence}%\")\nprint(f\"Analysis Time: {result.analysis_time:.2f}s\")\n\nprint(\"\\n=== DIMENSION SCORES ===\")\nfor dimension, score in result.dimension_scores.items():\n    print(f\"{dimension}: {score}/100\")\n\nprint(\"\\n=== KEY FINDINGS ===\")\nfor finding in result.findings:\n    print(f\"- {finding}\")\n\nprint(\"\\n=== RECOMMENDATIONS ===\")\nfor recommendation in result.recommendations:\n    print(f\"- {recommendation}\")\n</code></pre>"},{"location":"user-guide/#configuration","title":"\u2699\ufe0f Configuration","text":""},{"location":"user-guide/#environment-variables","title":"Environment Variables","text":"<p>Set up your API key and other configuration:</p> <pre><code># .env file\nOPENAI_API_KEY=your-api-key-here\nCACHE_DIR=./cache\nDEFAULT_TIMEOUT=30\nLOG_LEVEL=INFO\n</code></pre>"},{"location":"user-guide/#configuration-options","title":"Configuration Options","text":"<pre><code>from privacy_policy import PrivacyPolicyAnalyzer\n\nanalyzer = PrivacyPolicyAnalyzer(\n    # API Configuration\n    api_key=\"your-api-key\",\n    model=\"gpt-4\",\n    temperature=0.1,\n\n    # Caching\n    cache_dir=\"./cache\",\n    cache_ttl=3600,  # 1 hour\n\n    # Network\n    timeout=30,\n    max_retries=3,\n\n    # Analysis\n    include_recommendations=True,\n    detailed_analysis=True,\n    language=\"en\"\n)\n</code></pre>"},{"location":"user-guide/#analysis-methods","title":"\ud83d\udd0d Analysis Methods","text":""},{"location":"user-guide/#1-url-analysis","title":"1. URL Analysis","text":"<pre><code># Basic URL analysis\nresult = analyzer.analyze_url(\"https://example.com/privacy\")\n\n# With custom options\nresult = analyzer.analyze_url(\n    \"https://example.com/privacy\",\n    extract_method=\"trafilatura\",  # or \"beautifulsoup\"\n    timeout=60,\n    follow_redirects=True\n)\n</code></pre>"},{"location":"user-guide/#2-text-analysis","title":"2. Text Analysis","text":"<pre><code># Analyze raw text\nresult = analyzer.analyze_text(policy_text)\n\n# With custom prompts\nresult = analyzer.analyze_text(\n    policy_text,\n    custom_prompts={\n        \"data_collection\": \"Focus on data collection practices\",\n        \"sharing\": \"Analyze data sharing policies\"\n    }\n)\n</code></pre>"},{"location":"user-guide/#3-batch-analysis","title":"3. Batch Analysis","text":"<pre><code># Analyze multiple URLs\nurls = [\n    \"https://example1.com/privacy\",\n    \"https://example2.com/privacy\",\n    \"https://example3.com/privacy\"\n]\n\nresults = analyzer.analyze_batch(urls)\n\n# Compare results\ncomparison = analyzer.compare_results(results)\nprint(comparison.summary)\n</code></pre>"},{"location":"user-guide/#understanding-results","title":"\ud83d\udcca Understanding Results","text":""},{"location":"user-guide/#score-interpretation","title":"Score Interpretation","text":"<ul> <li>90-100: Excellent privacy practices</li> <li>80-89: Good privacy practices with minor issues</li> <li>70-79: Fair privacy practices with some concerns</li> <li>60-69: Poor privacy practices with significant issues</li> <li>Below 60: Very poor privacy practices</li> </ul>"},{"location":"user-guide/#dimension-scores","title":"Dimension Scores","text":"<p>The analyzer evaluates several key dimensions:</p> <ul> <li>Data Collection (0-100): How much and what type of data is collected</li> <li>Data Sharing (0-100): How data is shared with third parties</li> <li>User Rights (0-100): What rights users have over their data</li> <li>Transparency (0-100): How clear and understandable the policy is</li> <li>Compliance (0-100): Adherence to privacy regulations</li> </ul>"},{"location":"user-guide/#confidence-levels","title":"Confidence Levels","text":"<ul> <li>High (80-100%): Very confident in the analysis</li> <li>Medium (60-79%): Moderately confident</li> <li>Low (Below 60%): Low confidence, manual review recommended</li> </ul>"},{"location":"user-guide/#advanced-features","title":"\ud83d\ude80 Advanced Features","text":""},{"location":"user-guide/#custom-prompts","title":"Custom Prompts","text":"<pre><code># Define custom analysis prompts\ncustom_prompts = {\n    \"data_collection\": \"\"\"\n    Analyze the data collection practices in this privacy policy.\n    Focus on:\n    - What data is collected\n    - How it's collected\n    - Legal basis for collection\n    \"\"\",\n\n    \"user_rights\": \"\"\"\n    Identify user rights mentioned in this privacy policy.\n    Look for:\n    - Access rights\n    - Deletion rights\n    - Portability rights\n    - Opt-out options\n    \"\"\"\n}\n\nresult = analyzer.analyze_text(policy_text, custom_prompts=custom_prompts)\n</code></pre>"},{"location":"user-guide/#caching","title":"Caching","text":"<pre><code># Enable caching for better performance\nanalyzer = PrivacyPolicyAnalyzer(\n    cache_dir=\"./cache\",\n    cache_ttl=3600  # Cache for 1 hour\n)\n\n# Clear cache when needed\nanalyzer.clear_cache()\n</code></pre>"},{"location":"user-guide/#export-results","title":"Export Results","text":"<pre><code># Export to JSON\nresult.export_json(\"analysis_results.json\")\n\n# Export to CSV\nresult.export_csv(\"analysis_results.csv\")\n\n# Export to HTML report\nresult.export_html(\"privacy_report.html\")\n</code></pre>"},{"location":"user-guide/#troubleshooting","title":"\ud83d\udd27 Troubleshooting","text":""},{"location":"user-guide/#common-issues","title":"Common Issues","text":""},{"location":"user-guide/#1-api-key-issues","title":"1. API Key Issues","text":"<pre><code># Check if API key is set\nimport os\nprint(f\"API Key set: {bool(os.getenv('OPENAI_API_KEY'))}\")\n\n# Set API key programmatically\nanalyzer = PrivacyPolicyAnalyzer(api_key=\"your-key-here\")\n</code></pre>"},{"location":"user-guide/#2-network-issues","title":"2. Network Issues","text":"<pre><code># Increase timeout for slow websites\nresult = analyzer.analyze_url(\n    \"https://slow-website.com/privacy\",\n    timeout=120\n)\n\n# Use different extraction method\nresult = analyzer.analyze_url(\n    \"https://example.com/privacy\",\n    extract_method=\"beautifulsoup\"  # Try different method\n)\n</code></pre>"},{"location":"user-guide/#3-content-extraction-issues","title":"3. Content Extraction Issues","text":"<pre><code># Check if content was extracted\nresult = analyzer.analyze_url(\"https://example.com/privacy\")\nprint(f\"Content extracted: {len(result.raw_content) &gt; 0}\")\nprint(f\"Content length: {len(result.raw_content)} characters\")\n\n# Try manual extraction\nfrom privacy_policy.extractors import WebExtractor\nextractor = WebExtractor()\ncontent = extractor.extract(\"https://example.com/privacy\")\n</code></pre>"},{"location":"user-guide/#debug-mode","title":"Debug Mode","text":"<pre><code># Enable debug logging\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\n\nanalyzer = PrivacyPolicyAnalyzer(debug=True)\nresult = analyzer.analyze_url(\"https://example.com/privacy\")\n</code></pre>"},{"location":"user-guide/#examples","title":"\ud83d\udcda Examples","text":""},{"location":"user-guide/#example-1-basic-analysis","title":"Example 1: Basic Analysis","text":"<pre><code>from privacy_policy import PrivacyPolicyAnalyzer\n\n# Initialize\nanalyzer = PrivacyPolicyAnalyzer()\n\n# Analyze\nresult = analyzer.analyze_url(\"https://example.com/privacy\")\n\n# Display results\nprint(f\"Privacy Score: {result.overall_score}/100\")\nprint(f\"Key Issues: {result.findings}\")\n</code></pre>"},{"location":"user-guide/#example-2-comparative-analysis","title":"Example 2: Comparative Analysis","text":"<pre><code># Analyze multiple policies\nurls = [\n    \"https://company1.com/privacy\",\n    \"https://company2.com/privacy\"\n]\n\nresults = []\nfor url in urls:\n    result = analyzer.analyze_url(url)\n    results.append(result)\n\n# Compare\ncomparison = analyzer.compare_results(results)\nprint(comparison.summary)\n</code></pre>"},{"location":"user-guide/#example-3-custom-analysis","title":"Example 3: Custom Analysis","text":"<pre><code># Custom analysis with specific focus\ncustom_prompts = {\n    \"gdpr_compliance\": \"Analyze GDPR compliance aspects\",\n    \"data_minimization\": \"Check data minimization practices\"\n}\n\nresult = analyzer.analyze_text(\n    policy_text,\n    custom_prompts=custom_prompts\n)\n\nprint(\"GDPR Compliance:\", result.custom_scores[\"gdpr_compliance\"])\nprint(\"Data Minimization:\", result.custom_scores[\"data_minimization\"])\n</code></pre>"},{"location":"user-guide/#getting-help","title":"\ud83c\udd98 Getting Help","text":"<ul> <li>Documentation: Check the API Reference for detailed API documentation</li> <li>Issues: Report bugs on GitHub Issues</li> <li>Discussions: Join community discussions on GitHub Discussions</li> <li>Discord: Join our Happy Hacking Space Discord</li> </ul> <p>Happy analyzing! \ud83d\udd0d\u2728</p>"}]}